package fr.paris.lutece.plugins.importexport.service.export;

import fr.paris.lutece.portal.business.xsl.XslExport;
import fr.paris.lutece.portal.business.xsl.XslExportHome;
import fr.paris.lutece.portal.service.plugin.Plugin;
import fr.paris.lutece.portal.service.util.AppLogService;
import fr.paris.lutece.portal.service.util.AppPathService;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;


public class RunnableExportService implements Runnable
{

    public static final int STATUS_QUEUED = 0;
    public static final int STATUS_WORKING = 1;
    public static final int STATUS_FINISHED = 2;

    private static final String PLUGIN_IMPORTEXPORT_FOLDER = "plugins/importexport/";
    private static final String CONSTANT_SLASH = "/";
    private static final String CONSTANT_POINT = ".";

    private int _nStatus = STATUS_QUEUED;
    private String _strTableName;
    private List<String> _listColumns;
    private int _nXSLStylesheetId;
    private Plugin _plugin;
    private String _strExportKey;
    private String _strFileExtention;

    /**
     * Creates a new export to run in a dedicated thread
     * @param strTableName The name of table to export
     * @param listColumns The list of columns to export
     * @param nXSLStylesheetId The id of the stylesheet to apply to the data
     *            retrieved from the database. If the id is 0, then the row XML
     *            is returned
     * @param plugin The plugin to get the pool of
     * @param strExportKey The key of the export. Only one export can be run at
     *            the same time for a given key
     */
    public RunnableExportService( String strTableName, List<String> listColumns, int nXSLStylesheetId, Plugin plugin,
            String strExportKey )
    {
        this._strTableName = strTableName;
        this._listColumns = listColumns;
        this._plugin = plugin;
        this._nXSLStylesheetId = nXSLStylesheetId;
        this._strExportKey = strExportKey;
        XslExport xslExport = XslExportHome.findByPrimaryKey( _nXSLStylesheetId );
        _strFileExtention = xslExport.getExtension( );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void run( )
    {
        FileWriter fileWriter = null;
        BufferedWriter bufferedWriter = null;
        try
        {
            // We flag the runnable as working
            _nStatus = STATUS_WORKING;
            String strExport = ExportManager.doProcessExport( _strTableName, _listColumns, _nXSLStylesheetId, _plugin );
            File file = new File( getExportedFileName( ) );
            if ( file.exists( ) )
            {
                file.delete( );
            }
            else
            {
                File containingFolder = file.getParentFile( );
                if ( !containingFolder.exists( ) )
                {
                    containingFolder.mkdirs( );
                }
            }
            file.createNewFile( );
            fileWriter = new FileWriter( file );
            bufferedWriter = new BufferedWriter( fileWriter );
            bufferedWriter.write( strExport );
            bufferedWriter.flush( );
            // This close both the file writer and the buffered writer
            bufferedWriter.close( );
            bufferedWriter = null;
            fileWriter = null;
        }
        catch ( Exception e )
        {
            AppLogService.error( e.getMessage( ), e );
        }
        finally
        {
            // We finnaly close writers that has not already been closed
            if ( bufferedWriter != null )
            {
                try
                {
                    bufferedWriter.close( );
                }
                catch ( IOException e )
                {
                    AppLogService.error( e.getMessage( ), e );
                }
            }
            if ( fileWriter != null )
            {
                try
                {
                    fileWriter.close( );
                }
                catch ( IOException e )
                {
                    AppLogService.error( e.getMessage( ), e );
                }
            }
            // We flag the runnable as finished
            _nStatus = STATUS_FINISHED;
        }
    }

    /**
     * Get the status of the service.
     * @return {@link #STATUS_QUEUED} if the serviced has not been started,
     *         {@link #STATUS_WORKING} if it is executing, or
     *         {@link #STATUS_FINISHED} if its execution has ended.
     */
    public int getServiceStatus( )
    {
        return _nStatus;
    }

    /**
     * Get the name of the file generated by this export service
     * @return The name of the file generated by this export service
     */
    public String getExportedFileName( )
    {
        return AppPathService.getWebAppPath( ) + CONSTANT_SLASH + getExportedFileRelativeUrl( );
    }

    /**
     * Get the URL of the file generated by this export service. The URL is
     * relative from the root folder of the webapp
     * @return The URL of the file generated by this export service
     */
    public String getExportedFileRelativeUrl( )
    {
        return PLUGIN_IMPORTEXPORT_FOLDER + _strExportKey + CONSTANT_SLASH + _strTableName + CONSTANT_POINT
                + _strFileExtention;
    }
}
